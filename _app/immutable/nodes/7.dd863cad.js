import{s as qe,f as i,a as d,g as o,h as D,c,d as t,G as k,j as w,i as r,u as p,l as T,m as H,K as Ce,p as at,S as st,v as nt}from"../chunks/scheduler.8d84c197.js";import{S as Ae,i as Fe,b as B,d as O,m as N,a as Q,t as U,e as V,j as rt}from"../chunks/index.5e028736.js";import{G as tt,R as ze}from"../chunks/Gif.cb2d118f.js";import{g as Te,a as He}from"../chunks/spread.8a54911c.js";import{R as lt}from"../chunks/RangeSlider.00a7ad4c.js";function it(_){let a;return{c(){a=T("Blender donut")},l(l){a=H(l,"Blender donut")},m(l,f){r(l,a,f)},d(l){l&&t(a)}}}function ot(_){let a;return{c(){a=T("Quick ttk on boss")},l(l){a=H(l,"Quick ttk on boss")},m(l,f){r(l,a,f)},d(l){l&&t(a)}}}function pt(_){let a,l,f,b,v,x,u,R=`Demo gifs: Tutorial Donut and gamer clip from my best 
		run of <a href="https://store.steampowered.com/app/1676130/Deadlink/" target="_blank">deadlink</a>.`,$;return f=new tt({props:{src:"/media/projects/GifScrubber/blender_donut.mp4",height:"min(240px, 24vh)",radius_type:"combo left",$$slots:{caption:[it]},$$scope:{ctx:_}}}),v=new tt({props:{src:"/media/projects/GifScrubber/deadlink.mp4",height:"min(240px, 24vh)",t:"#t=1",autoplay:!1,controlsBg:"#0006",radius_type:"combo right",$$slots:{caption:[ot]},$$scope:{ctx:_}}}),{c(){a=i("figure"),l=i("div"),B(f.$$.fragment),b=d(),B(v.$$.fragment),x=d(),u=i("figcaption"),u.innerHTML=R,this.h()},l(h){a=o(h,"FIGURE",{class:!0,role:!0});var g=D(a);l=o(g,"DIV",{class:!0});var y=D(l);O(f.$$.fragment,y),b=c(y),O(v.$$.fragment,y),y.forEach(t),x=c(g),u=o(g,"FIGCAPTION",{class:!0,"data-svelte-h":!0}),k(u)!=="svelte-1s14123"&&(u.innerHTML=R),g.forEach(t),this.h()},h(){w(l,"class","svelte-o0m8eb"),w(u,"class","caption"),w(a,"class","max-w svelte-o0m8eb"),w(a,"role","group")},m(h,g){r(h,a,g),p(a,l),N(f,l,null),p(l,b),N(v,l,null),p(a,x),p(a,u),$=!0},p(h,[g]){const y={};g&1&&(y.$$scope={dirty:g,ctx:h}),f.$set(y);const G={};g&1&&(G.$$scope={dirty:g,ctx:h}),v.$set(G)},i(h){$||(Q(f.$$.fragment,h),Q(v.$$.fragment,h),$=!0)},o(h){U(f.$$.fragment,h),U(v.$$.fragment,h),$=!1},d(h){h&&t(a),V(f),V(v)}}}class ft extends Ae{constructor(a){super(),Fe(this,a,null,pt,qe,{})}}function mt(_){let a,l,f,b,v,x,u,R,$,h,g,y,G=`Simulating DPR=3 to compare canvas quality at different render scales. From left: default (<em>20px</em>), by 1×DPR
		(<em>60px</em>), and by 2×DPR (<em>120px</em>).`,M;const J=[{size:20},{percent:_[0]},_[2]];let z={};for(let s=0;s<J.length;s+=1)z=Ce(z,J[s]);f=new ze({props:z});const I=[{size:60},{percent:_[0]},_[2]];let K={};for(let s=0;s<I.length;s+=1)K=Ce(K,I[s]);v=new ze({props:K});const P=[{size:120},{percent:_[0]},_[2]];let W={};for(let s=0;s<P.length;s+=1)W=Ce(W,P[s]);u=new ze({props:W});const X=[_[1]];function ie(s){_[3](s)}let j={};for(let s=0;s<X.length;s+=1)j=Ce(j,X[s]);return _[0]!==void 0&&(j.value=_[0]),$=new lt({props:j}),at.push(()=>rt($,"value",ie)),{c(){a=i("figure"),l=i("div"),B(f.$$.fragment),b=d(),B(v.$$.fragment),x=d(),B(u.$$.fragment),R=d(),B($.$$.fragment),g=d(),y=i("figcaption"),y.innerHTML=G,this.h()},l(s){a=o(s,"FIGURE",{class:!0,role:!0});var m=D(a);l=o(m,"DIV",{class:!0});var E=D(l);O(f.$$.fragment,E),b=c(E),O(v.$$.fragment,E),x=c(E),O(u.$$.fragment,E),E.forEach(t),R=c(m),O($.$$.fragment,m),g=c(m),y=o(m,"FIGCAPTION",{class:!0,"data-svelte-h":!0}),k(y)!=="svelte-zil5re"&&(y.innerHTML=G),m.forEach(t),this.h()},h(){w(l,"class","radius examples svelte-15ez60t"),w(y,"class","caption"),w(a,"class","max-w svelte-15ez60t"),w(a,"role","group")},m(s,m){r(s,a,m),p(a,l),N(f,l,null),p(l,b),N(v,l,null),p(l,x),N(u,l,null),p(a,R),N($,a,null),p(a,g),p(a,y),M=!0},p(s,[m]){const E=m&5?Te(J,[J[0],m&1&&{percent:s[0]},m&4&&He(s[2])]):{};f.$set(E);const oe=m&5?Te(I,[I[0],m&1&&{percent:s[0]},m&4&&He(s[2])]):{};v.$set(oe);const C=m&5?Te(P,[P[0],m&1&&{percent:s[0]},m&4&&He(s[2])]):{};u.$set(C);const pe=m&2?Te(X,[He(s[1])]):{};!h&&m&1&&(h=!0,pe.value=s[0],st(()=>h=!1)),$.$set(pe)},i(s){M||(Q(f.$$.fragment,s),Q(v.$$.fragment,s),Q(u.$$.fragment,s),Q($.$$.fragment,s),M=!0)},o(s){U(f.$$.fragment,s),U(v.$$.fragment,s),U(u.$$.fragment,s),U($.$$.fragment,s),M=!1},d(s){s&&t(a),V(f),V(v),V(u),V($)}}}function ut(_,a,l){const f={thumbColor:"var(--slate-blue-dim)",showNumber:!0,numSize:"var(--step--1)",step:"1",numColor:"var(--color-caption)"};let b=25;const v={use_decimal:!1,use_DPR:!1,fillSpace:!0,seeking:!0,bgColor:"none"};function x(u){b=u,l(0,b)}return[b,f,v,x]}class dt extends Ae{constructor(a){super(),Fe(this,a,ut,mt,qe,{})}}function ct(_){let a,l="<span>Gif Scrubber</span>",f,b,v=`An inline video player I made to act as a drop-in alternative to <code data-type="ext">.gif</code>. Along with helping
	me avoid conversion-related headaches, the component makes media handling more flexible and has the added benefit of
	thirty years’ worth of codec improvements.`,x,u,R,$,h,g,y="Media Controls",G,M,J=`To make it look and feel consistent, I decided to implement custom controls: an always-visible button on the corner\r
	toggles play state and, when the container is grabbed, pointer events kick in to manage timeline scrubbing.`,z,I,K,P,W,X,ie,j,s,m,E="Progress indicator",oe,C,pe,Y,Be="svg",Ie,Z,Oe="canvas",Me,ee,Pe,Le,ue,te,de,ae,Ne=`Just to try, I scaled the dimensions up by another factor of two (<em>i.e.</em> the rightmost canvas) to make it
	<em>super</em>
	crisp—<em>super</em>
	unnecessary! It <em>was</em> slightly sharper and there <em>wasn&#39;t</em> any noticeable impact on performance (only a single
	canvas is active at a time), so I went with it.`,ce,he,ge,se,Qe="Format Considerations",ve,ne,Ue=`While testing, I realized that replacing <code data-type="ext">.gif</code> with the
	<code data-type="html">video</code> element comes with a couple of nontrivial (to me, at least) drawbacks:`,_e,S,Ve="<li>you can’t <em>press-and-hold</em> to save on mobile</li> <li>they won&#39;t be visible in reader mode</li> <li>playback isn&#39;t guaranteed—it depends on a support matrix of browser features and hardware capabilities</li>",be,re,Je=`To make a long story short, I took care of the last point in a pre-build step by writing a Python script to traverse
	my media directory and generate <code data-type="ext">.webm</code> fallbacks. My magic ffmpeg command looks like this:`,$e,q,Ke=`<code class="svelte-1kecyt1"><span>ffmpeg</span> -i [input].mp4 -movflags +faststart -pix_fmt yuv420p -c:v libvpx-vp9 -threads 8 -crf 40 -g 32 -deadline good -an [output].webm</code>
`,ye,we,ke,L,Re,fe,We="e.g.",Ee,le,Ge,De,me,Xe="etc.",je,xe;return u=new ft({}),te=new dt({}),{c(){a=i("h1"),a.innerHTML=l,f=d(),b=i("p"),b.innerHTML=v,x=d(),B(u.$$.fragment),R=d(),$=i("hr"),h=d(),g=i("h3"),g.textContent=y,G=d(),M=i("p"),M.textContent=J,z=d(),I=i("p"),K=T(`It’s set up so moving a distance across the figure’s width is proportional to seeking that fraction of the video's\r
	duration. Huge s/o to Red Blob Games for their in-depth article about\r
	`),P=i("a"),W=T("draggable objects"),X=T("—extremely helpful reference!"),ie=d(),j=i("hr"),s=d(),m=i("h3"),m.textContent=E,oe=d(),C=i("p"),pe=T("The original "),Y=i("code"),Y.textContent=Be,Ie=T(` was plagued by rotation jank, so I wound up porting the graphic to\r
	`),Z=i("code"),Z.textContent=Oe,Me=T(`. That cleared up the transform issues, but introduced a new one that made it look\r
	blocky and aliased on high dpi screens. Thankfully, the browser provides a fix courtesy the\r
	`),ee=i("a"),Pe=T("device pixel ratio (DPR)"),Le=T(", which can be queried and used as a resolution multiplier."),ue=d(),B(te.$$.fragment),de=d(),ae=i("p"),ae.innerHTML=Ne,ce=d(),he=i("hr"),ge=d(),se=i("h3"),se.textContent=Qe,ve=d(),ne=i("p"),ne.innerHTML=Ue,_e=d(),S=i("ol"),S.innerHTML=Ve,be=d(),re=i("p"),re.innerHTML=Je,$e=d(),q=i("pre"),q.innerHTML=Ke,ye=d(),we=i("hr"),ke=d(),L=i("p"),Re=T("Getting everything to behave consistently across browsers and devices took a lot more effort than I expected ("),fe=i("em"),fe.textContent=We,Ee=d(),le=i("a"),Ge=T("safari media fragment hack"),De=T(", positioning quirks, "),me=i("em"),me.textContent=Xe,je=T(`), but I’m happy\r
	with how it turned out and learned a lot in the process.`),this.h()},l(e){a=o(e,"H1",{"data-svelte-h":!0}),k(a)!=="svelte-16mbdpp"&&(a.innerHTML=l),f=c(e),b=o(e,"P",{"data-svelte-h":!0}),k(b)!=="svelte-8vu8mi"&&(b.innerHTML=v),x=c(e),O(u.$$.fragment,e),R=c(e),$=o(e,"HR",{}),h=c(e),g=o(e,"H3",{"data-svelte-h":!0}),k(g)!=="svelte-1jcj2iy"&&(g.textContent=y),G=c(e),M=o(e,"P",{"data-svelte-h":!0}),k(M)!=="svelte-13tnlfp"&&(M.textContent=J),z=c(e),I=o(e,"P",{});var n=D(I);K=H(n,`It’s set up so moving a distance across the figure’s width is proportional to seeking that fraction of the video's\r
	duration. Huge s/o to Red Blob Games for their in-depth article about\r
	`),P=o(n,"A",{href:!0,target:!0});var Ye=D(P);W=H(Ye,"draggable objects"),Ye.forEach(t),X=H(n,"—extremely helpful reference!"),n.forEach(t),ie=c(e),j=o(e,"HR",{}),s=c(e),m=o(e,"H3",{"data-svelte-h":!0}),k(m)!=="svelte-lxue3i"&&(m.textContent=E),oe=c(e),C=o(e,"P",{});var A=D(C);pe=H(A,"The original "),Y=o(A,"CODE",{"data-type":!0,"data-svelte-h":!0}),k(Y)!=="svelte-mflvan"&&(Y.textContent=Be),Ie=H(A,` was plagued by rotation jank, so I wound up porting the graphic to\r
	`),Z=o(A,"CODE",{"data-type":!0,"data-svelte-h":!0}),k(Z)!=="svelte-jhma2z"&&(Z.textContent=Oe),Me=H(A,`. That cleared up the transform issues, but introduced a new one that made it look\r
	blocky and aliased on high dpi screens. Thankfully, the browser provides a fix courtesy the\r
	`),ee=o(A,"A",{href:!0,target:!0});var Ze=D(ee);Pe=H(Ze,"device pixel ratio (DPR)"),Ze.forEach(t),Le=H(A,", which can be queried and used as a resolution multiplier."),A.forEach(t),ue=c(e),O(te.$$.fragment,e),de=c(e),ae=o(e,"P",{"data-svelte-h":!0}),k(ae)!=="svelte-14gkn7f"&&(ae.innerHTML=Ne),ce=c(e),he=o(e,"HR",{}),ge=c(e),se=o(e,"H3",{"data-svelte-h":!0}),k(se)!=="svelte-zo8yxa"&&(se.textContent=Qe),ve=c(e),ne=o(e,"P",{"data-svelte-h":!0}),k(ne)!=="svelte-pmho79"&&(ne.innerHTML=Ue),_e=c(e),S=o(e,"OL",{role:!0,"data-svelte-h":!0}),k(S)!=="svelte-7379ec"&&(S.innerHTML=Ve),be=c(e),re=o(e,"P",{"data-svelte-h":!0}),k(re)!=="svelte-park15"&&(re.innerHTML=Je),$e=c(e),q=o(e,"PRE",{class:!0,"data-svelte-h":!0}),k(q)!=="svelte-1t6jss4"&&(q.innerHTML=Ke),ye=c(e),we=o(e,"HR",{}),ke=c(e),L=o(e,"P",{});var F=D(L);Re=H(F,"Getting everything to behave consistently across browsers and devices took a lot more effort than I expected ("),fe=o(F,"EM",{"data-svelte-h":!0}),k(fe)!=="svelte-2dbwd4"&&(fe.textContent=We),Ee=c(F),le=o(F,"A",{href:!0,target:!0});var et=D(le);Ge=H(et,"safari media fragment hack"),et.forEach(t),De=H(F,", positioning quirks, "),me=o(F,"EM",{"data-svelte-h":!0}),k(me)!=="svelte-ynskcq"&&(me.textContent=Xe),je=H(F,`), but I’m happy\r
	with how it turned out and learned a lot in the process.`),F.forEach(t),this.h()},h(){w(P,"href",ht),w(P,"target",Se),w(Y,"data-type","html"),w(Z,"data-type","html"),w(ee,"href",gt),w(ee,"target",Se),w(S,"role","list"),w(q,"class","codeblock overflow-scrollbar svelte-1kecyt1"),w(le,"href",vt),w(le,"target",Se)},m(e,n){r(e,a,n),r(e,f,n),r(e,b,n),r(e,x,n),N(u,e,n),r(e,R,n),r(e,$,n),r(e,h,n),r(e,g,n),r(e,G,n),r(e,M,n),r(e,z,n),r(e,I,n),p(I,K),p(I,P),p(P,W),p(I,X),r(e,ie,n),r(e,j,n),r(e,s,n),r(e,m,n),r(e,oe,n),r(e,C,n),p(C,pe),p(C,Y),p(C,Ie),p(C,Z),p(C,Me),p(C,ee),p(ee,Pe),p(C,Le),r(e,ue,n),N(te,e,n),r(e,de,n),r(e,ae,n),r(e,ce,n),r(e,he,n),r(e,ge,n),r(e,se,n),r(e,ve,n),r(e,ne,n),r(e,_e,n),r(e,S,n),r(e,be,n),r(e,re,n),r(e,$e,n),r(e,q,n),r(e,ye,n),r(e,we,n),r(e,ke,n),r(e,L,n),p(L,Re),p(L,fe),p(L,Ee),p(L,le),p(le,Ge),p(L,De),p(L,me),p(L,je),xe=!0},p:nt,i(e){xe||(Q(u.$$.fragment,e),Q(te.$$.fragment,e),xe=!0)},o(e){U(u.$$.fragment,e),U(te.$$.fragment,e),xe=!1},d(e){e&&(t(a),t(f),t(b),t(x),t(R),t($),t(h),t(g),t(G),t(M),t(z),t(I),t(ie),t(j),t(s),t(m),t(oe),t(C),t(ue),t(de),t(ae),t(ce),t(he),t(ge),t(se),t(ve),t(ne),t(_e),t(S),t(be),t(re),t($e),t(q),t(ye),t(we),t(ke),t(L)),V(u,e),V(te,e)}}}const Se="_blank",ht="https://www.redblobgames.com/making-of/draggable/",gt="https://cloudinary.com/glossary/device-pixel-ratio",vt="https://muffinman.io/blog/hack-for-ios-safari-to-display-html-video-thumbnail/";class kt extends Ae{constructor(a){super(),Fe(this,a,null,ct,qe,{})}}export{kt as component};
